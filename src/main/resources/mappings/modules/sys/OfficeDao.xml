<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.thinkgem.jeesite.modules.sys.dao.OfficeDao">

	<sql id="officeColumns">
		a.id,
		a.parent_id AS "parent.id",
		a.parent_ids,
		a.area_id AS "area.id",
		a.code,
		a.name,
		a.sort,
		a.type,
		a.grade,
		a.address, 
		a.zip_code, 
		a.master, 
		a.phone, 
		a.fax, 
		a.email, 
		a.plate,
		a.remarks,
		a.create_by AS "createBy.id",
		a.create_date,
		a.update_by AS "updateBy.id",
		a.update_date,
		a.del_flag,
		a.useable AS useable,
		a.primary_person AS "primaryPerson.id",
		a.deputy_person AS "deputyPerson.id",
		p.name AS "parent.name",
		ar.name AS "area.name",
		ar.parent_ids AS "area.parentIds",
		pp.name AS "primaryPerson.name",
		dp.name AS "deputyPerson.name",
		ec.status AS "planinformation.status",
		ec.shstatus AS "planinformation.shstatus",
		ec.threesement AS "planinformation.threesement",
		ec.foursegment AS "planinformation.foursegment"
	</sql>

	<sql id="officeJoins">
		LEFT JOIN sys_office p ON p.id = a.parent_id

		LEFT JOIN sys_area ar ON ar.id = a.area_id
		LEFT JOIN SYS_USER pp ON pp.id = a.primary_person
		LEFT JOIN SYS_USER dp ON dp.id = a.deputy_person
		LEFT JOIN ecpp_planinformation ec ON ec.unit = a.id
    </sql>
	
	<!--<select id="get" resultType="Office">-->
		<!--SELECT-->
			<!--<include refid="officeColumns"/>-->
		<!--FROM sys_office a-->
		<!--<include refid="officeJoins"/>-->
		<!--WHERE a.id = #{id}-->
	<!--</select>-->

	<select id="get" resultType="Office">
		SELECT
			a.id,
			a.parent_id AS "parent.id",
			a.parent_ids,
			a.area_id AS "area.id",
			a.code,
			a.name,
			a.sort,
			a.type,
			a.grade,
			a.address,
			a.zip_code,
			a.master,
			a.phone,
			a.fax,
			a.email,
			a.plate,
			a.remarks,
			a.create_by AS "createBy.id",
			a.create_date,
			a.update_by AS "updateBy.id",
			a.update_date,
			a.del_flag,
			a.useable AS useable,
			a.primary_person AS "primaryPerson.id",
			a.deputy_person AS "deputyPerson.id",
			p.name AS "parent.name",
			ar.name AS "area.name",
			ar.parent_ids AS "area.parentIds",
			pp.name AS "primaryPerson.name",
			dp.name AS "deputyPerson.name"
		FROM sys_office a
			LEFT JOIN sys_office p ON p.id = a.parent_id
			LEFT JOIN sys_area ar ON ar.id = a.area_id
			LEFT JOIN SYS_USER pp ON pp.id = a.primary_person
			LEFT JOIN SYS_USER dp ON dp.id = a.deputy_person
		WHERE a.id = #{id}
	</select>

	<select id="getOne" resultType="Office">
		SELECT *
		FROM sys_office a
		WHERE a.id = #{id}
	</select>
	
	<select id="getListUnuserUnit" resultType="Office">
		SELECT
			a.`name`,
			a.id,
			a.remarks
		FROM
			sys_office a
		LEFT JOIN ecpp_planinformation o ON o.unit = a.id
		WHERE
			((
				a.del_flag = '0'
				AND o.ID IS NULL
				AND a.id != '1'
				AND a.type = #{remarks}
			)
		OR o.`status` = '1') AND a.type = #{remarks} GROUP BY a.id
	</select>
	
	
<!--	<select id="findList" resultType="Office">
		SELECT
			<include refid="officeColumns"/>
		FROM sys_office a
		<include refid="officeJoins"/>
		WHERE a.del_flag = #{DEL_FLAG_NORMAL}
		&lt;!&ndash; 数据范围过滤 &ndash;&gt;
		${sqlMap.dsf}
		OR a.id = #{currentUser.office.id}
		ORDER BY a.code
	</select>-->

	<select id="findList" resultType="Office">
		SELECT
			a.id,
			a.parent_id AS "parent.id",
			a.parent_ids,
			a.area_id AS "area.id",
			a.code,
			a.name,
			a.sort,
			a.type,
			a.grade,
			a.address,
			a.zip_code,
			a.master,
			a.phone,
			a.fax,
			a.email,
			a.plate,
			a.remarks,
			a.create_by AS "createBy.id",
			a.create_date,
			a.update_by AS "updateBy.id",
			a.update_date,
			a.del_flag,
			a.useable AS useable,
			a.primary_person AS "primaryPerson.id",
			a.deputy_person AS "deputyPerson.id",
			p.name AS "parent.name",
			ar.name AS "area.name",
			ar.parent_ids AS "area.parentIds",
			pp.name AS "primaryPerson.name",
			dp.name AS "deputyPerson.name"
		FROM sys_office a
			LEFT JOIN sys_office p ON p.id = a.parent_id
			LEFT JOIN sys_area ar ON ar.id = a.area_id
			LEFT JOIN SYS_USER pp ON pp.id = a.primary_person
			LEFT JOIN SYS_USER dp ON dp.id = a.deputy_person
		WHERE a.del_flag = #{DEL_FLAG_NORMAL}
		<!-- 数据范围过滤 -->
		${sqlMap.dsf}
		OR a.id = #{currentUser.office.id}
		ORDER BY a.code
	</select>

<!--	<select id="findListNotRoot" resultType="Office">
		SELECT COUNT(a.id) AS "numUnit",
			<include refid="officeColumns"/>
		FROM sys_office a
		<include refid="officeJoins"/>
		WHERE a.del_flag = #{DEL_FLAG_NORMAL} AND a.id != '1'
		<if test="planinformation != null and planinformation.status != null and planinformation.status != ''">
			AND ec.status = #{planinformation.status}
		</if>
		<if test="planinformation != null and planinformation.shstatus != null and planinformation.shstatus != ''">
			AND ec.shstatus = #{planinformation.shstatus}
		</if>
		<if test="planinformation != null and planinformation.threesement != null and planinformation.threesement != ''">
			AND ec.threesement = #{planinformation.threesement}
		</if>
		<if test="planinformation != null and planinformation.foursegment != null and planinformation.foursegment != ''">
			AND ec.foursegment = #{planinformation.foursegment}
		</if>
		GROUP BY a.id ORDER BY a.code
	</select>-->

<!--	<select id="findListNotRoot" resultType="Office">
		SELECT a.name,a.id,a.remarks,a.type,
		(SELECT COUNT(*) FROM ecpp_planinformation ec WHERE ec.unit = a.id
		<if test="planinformation != null and planinformation.status != null and planinformation.status != ''">
			AND ec.status = #{planinformation.status}
		</if>
		<if test="planinformation != null and planinformation.shstatus != null and planinformation.shstatus != ''">
			AND ec.shstatus = #{planinformation.shstatus}
		</if>
		<if test="planinformation != null and planinformation.threesement != null and planinformation.threesement != ''">
			AND ec.threesement = #{planinformation.threesement}
		</if>
		<if test="planinformation != null and planinformation.foursegment != null and planinformation.foursegment != ''">
			AND ec.foursegment = #{planinformation.foursegment}
		</if>
		AND ec.del_flag = #{DEL_FLAG_NORMAL}) AS "numUnit"

		FROM sys_office a
		WHERE a.del_flag = #{DEL_FLAG_NORMAL} AND a.id != '1'
		GROUP BY a.id ORDER BY a.code
	</select>-->

	<select id="findListNotRoot" resultType="Office">
		SELECT a.name,a.id,a.remarks,a.type,
		(SELECT COUNT(*) FROM ecpp_planinformation ec WHERE ec.unit = a.id
		AND ec.tijiaotime is not null
		<if test="planinformation != null and planinformation.shstatus != null and planinformation.shstatus != ''">
			AND ec.shstatus = #{planinformation.shstatus}
		</if>
		<if test="planinformation != null and planinformation.threesement != null and planinformation.threesement != ''">
			AND ec.threesement = #{planinformation.threesement}
		</if>
		<if test="planinformation != null and planinformation.foursegment != null and planinformation.foursegment != ''">
			AND ec.foursegment = #{planinformation.foursegment}
		</if>
		AND ec.del_flag = #{DEL_FLAG_NORMAL}) AS "numUnit",

		(SELECT COUNT(*) FROM ecpp_planinformation ec LEFT JOIN ecpp_improvements im ON ec.id=im.planId WHERE ec.unit = a.id
		AND ec.tijiaotime is not null
		<if test="planinformation != null and planinformation.shstatus != null and planinformation.shstatus != ''">
			AND ec.shstatus = #{planinformation.shstatus}
		</if>
		<if test="planinformation != null and planinformation.threesement != null and planinformation.threesement != ''">
			AND ec.threesement = #{planinformation.threesement}
		</if>
		<if test="planinformation != null and planinformation.foursegment != null and planinformation.foursegment != ''">
			AND ec.foursegment = #{planinformation.foursegment}
		</if>
		AND im.del_flag = '0'
		AND ec.del_flag = '0'
		) AS "numUnitgjx"

		FROM sys_office a
		WHERE a.del_flag = #{DEL_FLAG_NORMAL} AND a.id != '1'
		GROUP BY a.id ORDER BY a.code
	</select>
	
<!--	<select id="findListbyplate" resultType="Office">
		SELECT
			<include refid="officeColumns"/>
		FROM sys_office a
		<include refid="officeJoins"/>
		WHERE a.del_flag = #{DEL_FLAG_NORMAL}
		AND a.plate LIKE
			<if test="dbName == 'oracle'">'%'||#{plate}||'%'</if>
			<if test="dbName == 'mssql'">'%'+#{plate}+'%'</if>
			<if test="dbName == 'mysql'">concat('%',#{plate},'%')</if>
		ORDER BY a.code
	</select>-->

	<select id="findListbyplate" resultType="Office">
		SELECT
			a.id,
			a.parent_id AS "parent.id",
			a.parent_ids,
			a.area_id AS "area.id",
			a.code,
			a.name,
			a.sort,
			a.type,
			a.grade,
			a.address,
			a.zip_code,
			a.master,
			a.phone,
			a.fax,
			a.email,
			a.plate,
			a.remarks,
			a.create_by AS "createBy.id",
			a.create_date,
			a.update_by AS "updateBy.id",
			a.update_date,
			a.del_flag,
			a.useable AS useable,
			a.primary_person AS "primaryPerson.id",
			a.deputy_person AS "deputyPerson.id",
			p.name AS "parent.name",
			ar.name AS "area.name",
			ar.parent_ids AS "area.parentIds",
			pp.name AS "primaryPerson.name",
			dp.name AS "deputyPerson.name"
		FROM sys_office a
			LEFT JOIN sys_office p ON p.id = a.parent_id
			LEFT JOIN sys_area ar ON ar.id = a.area_id
			LEFT JOIN SYS_USER pp ON pp.id = a.primary_person
			LEFT JOIN SYS_USER dp ON dp.id = a.deputy_person
		WHERE a.del_flag = #{DEL_FLAG_NORMAL}
		AND a.plate LIKE
			<if test="dbName == 'oracle'">'%'||#{plate}||'%'</if>
			<if test="dbName == 'mssql'">'%'+#{plate}+'%'</if>
			<if test="dbName == 'mysql'">concat('%',#{plate},'%')</if>
		ORDER BY a.code
	</select>
	
<!--	<select id="findListbyType" resultType="Office">
		SELECT
			<include refid="officeColumns"/>
		FROM sys_office a
		<include refid="officeJoins"/>
		WHERE a.del_flag = #{DEL_FLAG_NORMAL}
		<if test= "type != null">
			and a.type=#{type}
		</if>
		ORDER BY a.code
	</select>-->

	<select id="findListbyType" resultType="Office">
		SELECT
		a.id,
		a.parent_id AS "parent.id",
		a.parent_ids,
		a.area_id AS "area.id",
		a.code,
		a.name,
		a.sort,
		a.type,
		a.grade,
		a.address,
		a.zip_code,
		a.master,
		a.phone,
		a.fax,
		a.email,
		a.plate,
		a.remarks,
		a.create_by AS "createBy.id",
		a.create_date,
		a.update_by AS "updateBy.id",
		a.update_date,
		a.del_flag,
		a.useable AS useable,
		a.primary_person AS "primaryPerson.id",
		a.deputy_person AS "deputyPerson.id",
		p.name AS "parent.name",
		ar.name AS "area.name",
		ar.parent_ids AS "area.parentIds",
		pp.name AS "primaryPerson.name",
		dp.name AS "deputyPerson.name"
		FROM sys_office a
		LEFT JOIN sys_office p ON p.id = a.parent_id
		LEFT JOIN sys_area ar ON ar.id = a.area_id
		LEFT JOIN SYS_USER pp ON pp.id = a.primary_person
		LEFT JOIN SYS_USER dp ON dp.id = a.deputy_person
		WHERE a.del_flag = #{DEL_FLAG_NORMAL}
		<if test= "type != null">
			and a.type=#{type}
		</if>
		ORDER BY a.code
	</select>
			
	<select id="findAllList" resultType="Office">
        SELECT
        a.id,
        a.parent_id AS "parent.id",
        a.parent_ids,
        a.area_id AS "area.id",
        a.code,
        a.name,
        a.sort,
        a.type,
        a.grade,
        a.address,
        a.zip_code,
        a.master,
        a.phone,
        a.fax,
        a.email,
        a.plate,
        a.remarks,
        a.create_by AS "createBy.id",
        a.create_date,
        a.update_by AS "updateBy.id",
        a.update_date,
        a.del_flag,
        a.useable AS useable,
        a.primary_person AS "primaryPerson.id",
        a.deputy_person AS "deputyPerson.id",
        p.name AS "parent.name",
        ar.name AS "area.name",
        ar.parent_ids AS "area.parentIds",
        pp.name AS "primaryPerson.name",
        dp.name AS "deputyPerson.name"
        FROM sys_office a
        LEFT JOIN sys_office p ON p.id = a.parent_id
        LEFT JOIN sys_area ar ON ar.id = a.area_id
        LEFT JOIN SYS_USER pp ON pp.id = a.primary_person
        LEFT JOIN SYS_USER dp ON dp.id = a.deputy_person
        WHERE a.del_flag = #{DEL_FLAG_NORMAL}
        <!-- 数据范围过滤 -->
        ${sqlMap.dsf}
        OR a.id = #{currentUser.office.id}
        ORDER BY a.code
	</select>
	
<!--	<select id="findByParentIdsLike" resultType="Office">
		SELECT
			<include refid="officeColumns"/>
		FROM sys_office a
		<include refid="officeJoins"/>
		WHERE a.del_flag = #{DEL_FLAG_NORMAL} AND a.parent_ids LIKE #{parentIds}
		ORDER BY a.code
	</select>	-->

	<select id="findByParentIdsLike" resultType="Office">
		SELECT
			a.id,
			a.parent_id AS "parent.id",
			a.parent_ids,
			a.area_id AS "area.id",
			a.code,
			a.name,
			a.sort,
			a.type,
			a.grade,
			a.address,
			a.zip_code,
			a.master,
			a.phone,
			a.fax,
			a.email,
			a.plate,
			a.remarks,
			a.create_by AS "createBy.id",
			a.create_date,
			a.update_by AS "updateBy.id",
			a.update_date,
			a.del_flag,
			a.useable AS useable,
			a.primary_person AS "primaryPerson.id",
			a.deputy_person AS "deputyPerson.id",
			p.name AS "parent.name",
			ar.name AS "area.name",
			ar.parent_ids AS "area.parentIds",
			pp.name AS "primaryPerson.name",
			dp.name AS "deputyPerson.name"
		FROM sys_office a
			LEFT JOIN sys_office p ON p.id = a.parent_id
			LEFT JOIN sys_area ar ON ar.id = a.area_id
			LEFT JOIN SYS_USER pp ON pp.id = a.primary_person
			LEFT JOIN SYS_USER dp ON dp.id = a.deputy_person
		WHERE a.del_flag = #{DEL_FLAG_NORMAL} AND a.parent_ids LIKE #{parentIds}
		ORDER BY a.code
	</select>
	
	<insert id="insert">
		INSERT INTO sys_office(
			id, 
			parent_id, 
			parent_ids, 
			area_id, 
			code, 
			name, 
			sort, 
			type, 
			grade, 
			address, 
			zip_code, 
			master, 
			phone, 
			fax, 
			email, 
			plate,
			create_by, 
			create_date, 
			update_by, 
			update_date, 
			remarks, 
			del_flag,
			useable,
			primary_person,
			deputy_person
		) VALUES (
			#{id}, 
			#{parent.id}, 
			#{parentIds}, 
			#{area.id}, 
			#{code}, 
			#{name}, 
			#{sort}, 
			#{type}, 
			#{grade}, 
			#{address}, 
			#{zipCode}, 
			#{master}, 
			#{phone}, 
			#{fax}, 
			#{email}, 
			#{plate}, 
			#{createBy.id}, 
			#{createDate}, 
			#{updateBy.id}, 
			#{updateDate}, 
			#{remarks}, 
			#{delFlag},
			#{useable},
			#{primaryPerson.id},
			#{deputyPerson.id}
		)
	</insert>
	
	<update id="update">
		UPDATE sys_office SET 
			parent_id = #{parent.id}, 
			parent_ids = #{parentIds}, 
			area_id = #{area.id}, 
			code = #{code}, 
			name = #{name}, 
			type = #{type}, 
			grade = #{grade}, 
			address = #{address}, 
			zip_code = #{zipCode}, 
			master = #{master}, 
			phone = #{phone}, 
			fax = #{fax}, 
			email = #{email}, 
			plate = #{plate}, 
			update_by = #{updateBy.id}, 
			update_date = #{updateDate}, 
			remarks = #{remarks},
			useable=#{useable},
			primary_person=#{primaryPerson.id},
			deputy_person=#{deputyPerson.id}
		WHERE id = #{id}
	</update>
	
	<update id="updateParentIds">
		UPDATE sys_office SET 
			parent_id = #{parent.id}, 
			parent_ids = #{parentIds}
		WHERE id = #{id}
	</update>
	
	<update id="delete">
		UPDATE sys_office SET 
			del_flag = #{DEL_FLAG_DELETE}
		WHERE id = #{id} OR parent_ids LIKE 
					<if test="dbName == 'oracle'">'%,'||#{id}||',%'</if>
					<if test="dbName == 'mssql'">'%,'+#{id}+',%'</if>
					<if test="dbName == 'mysql'">CONCAT('%,', #{id}, ',%')</if>
	</update>
	
</mapper>